import * as tslib_1 from "tslib";
import { Directive, Input, ContentChildren, QueryList } from '@angular/core';
import { CKButtonDirective } from './ckbutton.directive';
/**
 * CKGroup component
 * Usage :
 *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500">
 *      <ckgroup [name]="'exampleGroup2'" [previous]="'1'" [subgroupOf]="'exampleGroup1'">
 *          .
 *          .
 *      </ckgroup>
 *   </ckeditor>
 */
var CKGroupDirective = /** @class */ (function () {
    function CKGroupDirective() {
    }
    CKGroupDirective.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Reconfigure each button's toolbar property within ckgroup to hold its parent's name
        this.toolbarButtons.forEach(function (button) { return (button.toolbar = _this.name); });
    };
    CKGroupDirective.prototype.initialize = function (editor) {
        editor.instance.ui.addToolbarGroup(this.name, this.previous, this.subgroupOf);
        // Initialize each button within ckgroup
        this.toolbarButtons.forEach(function (button) {
            button.initialize(editor);
        });
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CKGroupDirective.prototype, "name", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CKGroupDirective.prototype, "previous", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], CKGroupDirective.prototype, "subgroupOf", void 0);
    tslib_1.__decorate([
        ContentChildren(CKButtonDirective),
        tslib_1.__metadata("design:type", QueryList)
    ], CKGroupDirective.prototype, "toolbarButtons", void 0);
    CKGroupDirective = tslib_1.__decorate([
        Directive({
            selector: 'ckgroup',
        })
    ], CKGroupDirective);
    return CKGroupDirective;
}());
export { CKGroupDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItY2tlZGl0b3IvIiwic291cmNlcyI6WyJja2dyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQW9CLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0YsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFekQ7Ozs7Ozs7OztHQVNHO0FBSUg7SUFBQTtJQWtCQSxDQUFDO0lBWkMsNkNBQWtCLEdBQWxCO1FBQUEsaUJBR0M7UUFGQyxzRkFBc0Y7UUFDdEYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxFQUE1QixDQUE0QixDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVNLHFDQUFVLEdBQWpCLFVBQWtCLE1BQXlCO1FBQ3pDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlFLHdDQUF3QztRQUN4QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU07WUFDaEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFoQlE7UUFBUixLQUFLLEVBQUU7O2tEQUFjO0lBQ2I7UUFBUixLQUFLLEVBQUU7O3NEQUFlO0lBQ2Q7UUFBUixLQUFLLEVBQUU7O3dEQUFvQjtJQUNRO1FBQW5DLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQzswQ0FBaUIsU0FBUzs0REFBb0I7SUFKdEUsZ0JBQWdCO1FBSDVCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUM7T0FDVyxnQkFBZ0IsQ0FrQjVCO0lBQUQsdUJBQUM7Q0FBQSxBQWxCRCxJQWtCQztTQWxCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBBZnRlckNvbnRlbnRJbml0LCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ0tFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL2NrZWRpdG9yLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDS0J1dHRvbkRpcmVjdGl2ZSB9IGZyb20gJy4vY2tidXR0b24uZGlyZWN0aXZlJztcblxuLyoqXG4gKiBDS0dyb3VwIGNvbXBvbmVudFxuICogVXNhZ2UgOlxuICogIDxja2VkaXRvciBbKG5nTW9kZWwpXT1cImRhdGFcIiBbY29uZmlnXT1cInsuLi59XCIgZGVib3VuY2U9XCI1MDBcIj5cbiAqICAgICAgPGNrZ3JvdXAgW25hbWVdPVwiJ2V4YW1wbGVHcm91cDInXCIgW3ByZXZpb3VzXT1cIicxJ1wiIFtzdWJncm91cE9mXT1cIidleGFtcGxlR3JvdXAxJ1wiPlxuICogICAgICAgICAgLlxuICogICAgICAgICAgLlxuICogICAgICA8L2NrZ3JvdXA+XG4gKiAgIDwvY2tlZGl0b3I+XG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2NrZ3JvdXAnLFxufSlcbmV4cG9ydCBjbGFzcyBDS0dyb3VwRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcbiAgQElucHV0KCkgcHJldmlvdXM6IGFueTtcbiAgQElucHV0KCkgc3ViZ3JvdXBPZjogc3RyaW5nO1xuICBAQ29udGVudENoaWxkcmVuKENLQnV0dG9uRGlyZWN0aXZlKSB0b29sYmFyQnV0dG9uczogUXVlcnlMaXN0PENLQnV0dG9uRGlyZWN0aXZlPjtcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgLy8gUmVjb25maWd1cmUgZWFjaCBidXR0b24ncyB0b29sYmFyIHByb3BlcnR5IHdpdGhpbiBja2dyb3VwIHRvIGhvbGQgaXRzIHBhcmVudCdzIG5hbWVcbiAgICB0aGlzLnRvb2xiYXJCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IChidXR0b24udG9vbGJhciA9IHRoaXMubmFtZSkpO1xuICB9XG5cbiAgcHVibGljIGluaXRpYWxpemUoZWRpdG9yOiBDS0VkaXRvckNvbXBvbmVudCkge1xuICAgIGVkaXRvci5pbnN0YW5jZS51aS5hZGRUb29sYmFyR3JvdXAodGhpcy5uYW1lLCB0aGlzLnByZXZpb3VzLCB0aGlzLnN1Ymdyb3VwT2YpO1xuICAgIC8vIEluaXRpYWxpemUgZWFjaCBidXR0b24gd2l0aGluIGNrZ3JvdXBcbiAgICB0aGlzLnRvb2xiYXJCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIGJ1dHRvbi5pbml0aWFsaXplKGVkaXRvcik7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==