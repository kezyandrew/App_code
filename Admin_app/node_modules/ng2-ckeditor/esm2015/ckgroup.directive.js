import * as tslib_1 from "tslib";
import { Directive, Input, ContentChildren, QueryList } from '@angular/core';
import { CKButtonDirective } from './ckbutton.directive';
/**
 * CKGroup component
 * Usage :
 *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500">
 *      <ckgroup [name]="'exampleGroup2'" [previous]="'1'" [subgroupOf]="'exampleGroup1'">
 *          .
 *          .
 *      </ckgroup>
 *   </ckeditor>
 */
let CKGroupDirective = class CKGroupDirective {
    ngAfterContentInit() {
        // Reconfigure each button's toolbar property within ckgroup to hold its parent's name
        this.toolbarButtons.forEach(button => (button.toolbar = this.name));
    }
    initialize(editor) {
        editor.instance.ui.addToolbarGroup(this.name, this.previous, this.subgroupOf);
        // Initialize each button within ckgroup
        this.toolbarButtons.forEach(button => {
            button.initialize(editor);
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], CKGroupDirective.prototype, "name", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], CKGroupDirective.prototype, "previous", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], CKGroupDirective.prototype, "subgroupOf", void 0);
tslib_1.__decorate([
    ContentChildren(CKButtonDirective),
    tslib_1.__metadata("design:type", QueryList)
], CKGroupDirective.prototype, "toolbarButtons", void 0);
CKGroupDirective = tslib_1.__decorate([
    Directive({
        selector: 'ckgroup',
    })
], CKGroupDirective);
export { CKGroupDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItY2tlZGl0b3IvIiwic291cmNlcyI6WyJja2dyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQW9CLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0YsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFekQ7Ozs7Ozs7OztHQVNHO0FBSUgsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFNM0Isa0JBQWtCO1FBQ2hCLHNGQUFzRjtRQUN0RixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRU0sVUFBVSxDQUFDLE1BQXlCO1FBQ3pDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlFLHdDQUF3QztRQUN4QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNuQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7QUFqQlU7SUFBUixLQUFLLEVBQUU7OzhDQUFjO0FBQ2I7SUFBUixLQUFLLEVBQUU7O2tEQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7O29EQUFvQjtBQUNRO0lBQW5DLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztzQ0FBaUIsU0FBUzt3REFBb0I7QUFKdEUsZ0JBQWdCO0lBSDVCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxTQUFTO0tBQ3BCLENBQUM7R0FDVyxnQkFBZ0IsQ0FrQjVCO1NBbEJZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEFmdGVyQ29udGVudEluaXQsIENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDS0VkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vY2tlZGl0b3IuY29tcG9uZW50JztcbmltcG9ydCB7IENLQnV0dG9uRGlyZWN0aXZlIH0gZnJvbSAnLi9ja2J1dHRvbi5kaXJlY3RpdmUnO1xuXG4vKipcbiAqIENLR3JvdXAgY29tcG9uZW50XG4gKiBVc2FnZSA6XG4gKiAgPGNrZWRpdG9yIFsobmdNb2RlbCldPVwiZGF0YVwiIFtjb25maWddPVwiey4uLn1cIiBkZWJvdW5jZT1cIjUwMFwiPlxuICogICAgICA8Y2tncm91cCBbbmFtZV09XCInZXhhbXBsZUdyb3VwMidcIiBbcHJldmlvdXNdPVwiJzEnXCIgW3N1Ymdyb3VwT2ZdPVwiJ2V4YW1wbGVHcm91cDEnXCI+XG4gKiAgICAgICAgICAuXG4gKiAgICAgICAgICAuXG4gKiAgICAgIDwvY2tncm91cD5cbiAqICAgPC9ja2VkaXRvcj5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnY2tncm91cCcsXG59KVxuZXhwb3J0IGNsYXNzIENLR3JvdXBEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgQElucHV0KCkgbmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBwcmV2aW91czogYW55O1xuICBASW5wdXQoKSBzdWJncm91cE9mOiBzdHJpbmc7XG4gIEBDb250ZW50Q2hpbGRyZW4oQ0tCdXR0b25EaXJlY3RpdmUpIHRvb2xiYXJCdXR0b25zOiBRdWVyeUxpc3Q8Q0tCdXR0b25EaXJlY3RpdmU+O1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAvLyBSZWNvbmZpZ3VyZSBlYWNoIGJ1dHRvbidzIHRvb2xiYXIgcHJvcGVydHkgd2l0aGluIGNrZ3JvdXAgdG8gaG9sZCBpdHMgcGFyZW50J3MgbmFtZVxuICAgIHRoaXMudG9vbGJhckJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4gKGJ1dHRvbi50b29sYmFyID0gdGhpcy5uYW1lKSk7XG4gIH1cblxuICBwdWJsaWMgaW5pdGlhbGl6ZShlZGl0b3I6IENLRWRpdG9yQ29tcG9uZW50KSB7XG4gICAgZWRpdG9yLmluc3RhbmNlLnVpLmFkZFRvb2xiYXJHcm91cCh0aGlzLm5hbWUsIHRoaXMucHJldmlvdXMsIHRoaXMuc3ViZ3JvdXBPZik7XG4gICAgLy8gSW5pdGlhbGl6ZSBlYWNoIGJ1dHRvbiB3aXRoaW4gY2tncm91cFxuICAgIHRoaXMudG9vbGJhckJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgYnV0dG9uLmluaXRpYWxpemUoZWRpdG9yKTtcbiAgICB9KTtcbiAgfVxufVxuIl19