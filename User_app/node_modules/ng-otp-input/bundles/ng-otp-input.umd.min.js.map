{"version":3,"sources":["ng://ng-otp-input/lib/pipes/keys.pipe.ts","ng://ng-otp-input/lib/components/ng-otp-input/ng-otp-input.component.ts","ng://ng-otp-input/lib/directives/number-only.directive.ts","ng://ng-otp-input/lib/ng-otp-input.module.ts"],"names":["KeysPipe","prototype","transform","value","Object","keys","Pipe","args","name","NgOtpInputComponent","keysPipe","this","config","length","onInputChange","EventEmitter","inputControls","Array","componentKey","Math","random","toString","substring","Date","getTime","ngOnInit","otpForm","FormGroup","index","addControl","getControlName","FormControl","inputType","getInputType","ngAfterViewInit","_this","disableAutoFocus","containerItem","document","getElementById","addEventListener","evt","handlePaste","ele","getElementsByClassName","focus","idx","ifLeftArrow","event","ifKeyCode","ifRightArrow","ifBackspaceOrDelete","key","targetCode","keyCode","charCode","onKeyDown","$event","onKeyUp","inputIdx","nextInputId","appendKey","prevInputId","setSelected","target","rebuildValue","ifValidEntry","id","eleId","focusTo","setSelectionRange","setTimeout","inp","String","fromCharCode","test","navigator","userAgent","allowKeyCodes","includes","setValue","allowNumbersOnly","isNaN","reset","replace","from","forEach","c","get","indexOfElementToFocus","val","controls","k","emit","isPasswordInput","e","clipboardData","window","pastedData","getData","stopPropagation","preventDefault","Component","selector","template","Input","Output","NumberOnlyDirective","_elRef","_renderer","disabledNumberOnly","setAttribute","nativeElement","Directive","ElementRef","Renderer2","NgOtpInputModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'keys'\r\n})\r\nexport class KeysPipe implements PipeTransform {\r\n  transform(value: any): string[] {\r\n    return Object.keys(value)\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  AfterViewInit\r\n} from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { KeysPipe } from '../../pipes/keys.pipe';\r\nimport { Config } from '../../models/config';\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'ng-otp-input',\r\n  templateUrl: './ng-otp-input.component.html',\r\n  styleUrls: ['./ng-otp-input.component.scss']\r\n})\r\nexport class NgOtpInputComponent implements OnInit, AfterViewInit {\r\n  @Input() config: Config = { length: 4 };\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onInputChange = new EventEmitter<string>();\r\n  otpForm: FormGroup;\r\n  inputControls: FormControl[] = new Array(this.config.length);\r\n  componentKey =\r\n    Math.random()\r\n      .toString(36)\r\n      .substring(2) + new Date().getTime().toString(36);\r\n  inputType: string;\r\n  constructor(private keysPipe: KeysPipe) {}\r\n\r\n  ngOnInit() {\r\n    this.otpForm = new FormGroup({});\r\n    for (let index = 0; index < this.config.length; index++) {\r\n      this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n    }\r\n    this.inputType = this.getInputType();\r\n    \r\n  }\r\n  ngAfterViewInit(): void {\r\n    if (!this.config.disableAutoFocus) {\r\n      const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n      if (containerItem) {\r\n        containerItem.addEventListener('paste', (evt) => this.handlePaste(evt));\r\n        const ele: any = containerItem.getElementsByClassName('otp-input')[0];\r\n        if (ele && ele.focus) {\r\n          ele.focus();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private getControlName(idx) {\r\n    return `ctrl_${idx}`;\r\n  }\r\n\r\n  ifLeftArrow(event) {\r\n    return this.ifKeyCode(event, 37);\r\n  }\r\n\r\n\r\n  ifRightArrow(event) {\r\n    return this.ifKeyCode(event, 39);\r\n  }\r\n\r\n  ifBackspaceOrDelete(event) {\r\n    return (\r\n      event.key === 'Backspace' ||\r\n      event.key === 'Delete' ||\r\n      this.ifKeyCode(event, 8) ||\r\n      this.ifKeyCode(event, 46)\r\n    );\r\n  }\r\n\r\n  ifKeyCode(event, targetCode) {\r\n    const key = event.keyCode || event.charCode;\r\n    // tslint:disable-next-line: triple-equals\r\n    return key == targetCode ? true : false;\r\n  }\r\n  onKeyDown($event) {\r\n    var isSpace=this.ifKeyCode($event,32)\r\n    if (isSpace) {// prevent space\r\n    return false;\r\n    }\r\n  }\r\n\r\n  onKeyUp($event, inputIdx) {\r\n    const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\r\n    const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\r\n    if (this.ifRightArrow($event)) {\r\n      this.setSelected(nextInputId);\r\n      return;\r\n    }\r\n    if (this.ifLeftArrow($event)) {\r\n      this.setSelected(prevInputId);\r\n      return;\r\n    }\r\n    const isBackspace = this.ifBackspaceOrDelete($event);\r\n    if (isBackspace && !$event.target.value) {\r\n      this.setSelected(prevInputId);\r\n      this.rebuildValue();\r\n      return;\r\n    }\r\n    if (!$event.target.value) {\r\n      return;\r\n    }\r\n    if (this.ifValidEntry($event)) {\r\n      this.setSelected(nextInputId);\r\n    }\r\n    this.rebuildValue();\r\n  }\r\n\r\n  appendKey(id) {\r\n    return `${id}_${this.componentKey}`;\r\n  }\r\n\r\n  setSelected(eleId) {\r\n    this.focusTo(eleId);\r\n    const ele: any = document.getElementById(eleId);\r\n    if (ele && ele.setSelectionRange) {\r\n      setTimeout(() => {\r\n        ele.setSelectionRange(0, 1);\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  ifValidEntry(event) {\r\n    const inp = String.fromCharCode(event.keyCode);\r\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n    return (\r\n      isMobile ||\r\n      /[a-zA-Z0-9-_]/.test(inp) ||\r\n      (this.config.allowKeyCodes &&\r\n        this.config.allowKeyCodes.includes(event.keyCode)) ||\r\n      (event.keyCode >= 96 && event.keyCode <= 105)\r\n    );\r\n  }\r\n\r\n  focusTo(eleId) {\r\n    const ele: any = document.getElementById(eleId);\r\n    if (ele) {\r\n      ele.focus();\r\n    }\r\n  }\r\n\r\n  // method to set component value\r\n  setValue(value: any) {\r\n    if (this.config.allowNumbersOnly && isNaN(value)) {\r\n        return;\r\n    }\r\n    this.otpForm.reset();\r\n     if (!value) {\r\n       this.rebuildValue();\r\n       return;\r\n     }\r\n     value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n     Array.from(value).forEach((c, idx) => {\r\n          if (this.otpForm.get(this.getControlName(idx))) {\r\n            this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n          }\r\n     });\r\n     if (!this.config.disableAutoFocus) {\r\n      const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n      var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n      let ele : any = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n      if (ele && ele.focus) {\r\n        ele.focus();\r\n      }\r\n     }\r\n     this.rebuildValue();\r\n  }\r\n\r\n\r\n  rebuildValue() {\r\n    let val = '';\r\n    this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n      if (this.otpForm.controls[k].value) {\r\n        val += this.otpForm.controls[k].value;\r\n      }\r\n    });\r\n    this.onInputChange.emit(val);\r\n  }\r\n  getInputType():string{\r\n    return this.config.isPasswordInput \r\n      ? 'password' \r\n      : this.config.allowNumbersOnly \r\n        ? 'tel'\r\n        : 'text';\r\n  }\r\n  handlePaste(e) {\r\n    // Get pasted data via clipboard API\r\n    let clipboardData = e.clipboardData || window['clipboardData'];\r\n    if(clipboardData){\r\n     var pastedData =clipboardData.getData('Text');\r\n    }\r\n    // Stop data actually being pasted into div\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    if (!pastedData) {\r\n      return;\r\n    }\r\n    this.setValue(pastedData);\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[numberOnly]'\r\n})\r\nexport class NumberOnlyDirective {\r\n  @Input() disabledNumberOnly:boolean;\r\n  constructor (private _elRef: ElementRef, private _renderer: Renderer2) { }\r\n\r\n  ngOnInit() {\r\n    if(!this.disabledNumberOnly){\r\n      this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');\r\n    }\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { NgOtpInputComponent } from './components/ng-otp-input/ng-otp-input.component';\r\nimport { KeysPipe } from './pipes/keys.pipe';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NumberOnlyDirective } from './directives/number-only.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [NgOtpInputComponent, KeysPipe, NumberOnlyDirective],\r\n  exports: [NgOtpInputComponent],\r\n  providers: [KeysPipe]\r\n})\r\nexport class NgOtpInputModule { }\r\n"]}