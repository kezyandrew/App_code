{"version":3,"file":"rating.js","sourceRoot":"","sources":["../../src/components/rating.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EACZ,UAAU,EACX,MAAM,eAAe,CAAC;AACvB,OAAO,EAAwB,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAwCzE;IAtCA;QA4CE,SAAI,GAAW,SAAS,CAAC;QAEzB,eAAU,GAAyB,IAAI,YAAY,EAAE,CAAC;IAyBxD,CAAC;wBAjCY,eAAe;IAY1B,iCAAO,GAAP,UAAQ,IAAI;QACV,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,oCAAU,GAAV,UAAW,KAAU;QACnB,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;SACnB;IACH,CAAC;IAED,0CAAgB,GAAhB,UAAiB,EAAoB;QACnC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,2CAAiB,GAAjB,UAAkB,EAAO,IAAS,CAAC;IAEnC,0CAAgB,GAAhB,UAAkB,UAAmB;QACnC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;IAC7B,CAAC;;IA9BD;QADC,KAAK,EAAE;;iDACK;IAEb;QADC,KAAK,EAAE;;qDACU;IAElB;QADC,KAAK,EAAE;;iDACiB;IAEzB;QADC,MAAM,EAAE;kCACG,YAAY;uDAA8B;IAR3C,eAAe;QAtC3B,SAAS,CAAC;YACT,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,obAOT;YACD,MAAM,EAAE;gBACN,+QAiBC;aACF;YACD,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,iBAAiB;oBAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,iBAAe,EAAf,CAAe,CAAC;oBAC9C,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;OACW,eAAe,CAiC3B;IAAD,sBAAC;CAAA,AAjCD,IAiCC;SAjCY,eAAe","sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  forwardRef\r\n} from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"rating\",\r\n  template: `\r\n    <ion-buttons>\r\n      <ion-button [disabled]=\"readonly\" fill=\"clear\" [size]=\"size\" *ngFor=\"let current of [1, 2, 3, 4, 5]; let i = index\"\r\n        (click)=\"onClick(i + 1)\" (mouseover)=\"hoverRate = i + 1\" (mouseleave)=\"hoverRate = 0\">\r\n        <ion-icon slot=\"icon-only\" name=\"star\" [class.filled]=\"(i + 1 <= hoverRate || (!hoverRate && i + 1 <= rate))\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n  `,\r\n  styles: [\r\n    `\r\n      ion-buttons {\r\n        display: flex;\r\n        justify-content: center;\r\n      }\r\n\r\n      [ion-button][disabled] {\r\n        opacity: 1;\r\n      }\r\n\r\n      ion-icon {\r\n        color: gray;\r\n      }\r\n\r\n      ion-icon.filled {\r\n        color: orange;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => RatingComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class RatingComponent implements ControlValueAccessor {\r\n  @Input()\r\n  rate: number;\r\n  @Input()\r\n  readonly: boolean;\r\n  @Input()\r\n  size: string = 'default';\r\n  @Output()\r\n  rateChange: EventEmitter<number> = new EventEmitter();\r\n  hoverRate: number;\r\n  _onChange: Function;\r\n\r\n  onClick(rate) {\r\n    this.rate = rate;\r\n    this.rateChange.emit(this.rate);\r\n    this._onChange(this.rate);\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    if (value !== undefined) {\r\n      this.rate = value;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {}\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.readonly = isDisabled;\r\n  }\r\n}\r\n"]}