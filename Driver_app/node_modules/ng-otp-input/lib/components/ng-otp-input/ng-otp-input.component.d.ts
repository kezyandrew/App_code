import { OnInit, EventEmitter, AfterViewInit } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { KeysPipe } from '../../pipes/keys.pipe';
import { Config } from '../../models/config';
import * as ɵngcc0 from '@angular/core';
export declare class NgOtpInputComponent implements OnInit, AfterViewInit {
    private keysPipe;
    config: Config;
    onInputChange: EventEmitter<string>;
    otpForm: FormGroup;
    inputControls: FormControl[];
    componentKey: string;
    inputType: string;
    constructor(keysPipe: KeysPipe);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    private getControlName;
    ifLeftArrow(event: any): boolean;
    ifRightArrow(event: any): boolean;
    ifBackspaceOrDelete(event: any): boolean;
    ifKeyCode(event: any, targetCode: any): boolean;
    onKeyDown($event: any): boolean;
    onKeyUp($event: any, inputIdx: any): void;
    appendKey(id: any): string;
    setSelected(eleId: any): void;
    ifValidEntry(event: any): boolean;
    focusTo(eleId: any): void;
    setValue(value: any): void;
    rebuildValue(): void;
    getInputType(): string;
    handlePaste(e: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgOtpInputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgOtpInputComponent, "ng-otp-input", never, { "config": "config"; }, { "onInputChange": "onInputChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctb3RwLWlucHV0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZy1vdHAtaW5wdXQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIEV2ZW50RW1pdHRlciwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBLZXlzUGlwZSB9IGZyb20gJy4uLy4uL3BpcGVzL2tleXMucGlwZSc7XHJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL21vZGVscy9jb25maWcnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ090cElucHV0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICAgIHByaXZhdGUga2V5c1BpcGU7XHJcbiAgICBjb25maWc6IENvbmZpZztcclxuICAgIG9uSW5wdXRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgb3RwRm9ybTogRm9ybUdyb3VwO1xyXG4gICAgaW5wdXRDb250cm9sczogRm9ybUNvbnRyb2xbXTtcclxuICAgIGNvbXBvbmVudEtleTogc3RyaW5nO1xyXG4gICAgaW5wdXRUeXBlOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihrZXlzUGlwZTogS2V5c1BpcGUpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBnZXRDb250cm9sTmFtZTtcclxuICAgIGlmTGVmdEFycm93KGV2ZW50OiBhbnkpOiBib29sZWFuO1xyXG4gICAgaWZSaWdodEFycm93KGV2ZW50OiBhbnkpOiBib29sZWFuO1xyXG4gICAgaWZCYWNrc3BhY2VPckRlbGV0ZShldmVudDogYW55KTogYm9vbGVhbjtcclxuICAgIGlmS2V5Q29kZShldmVudDogYW55LCB0YXJnZXRDb2RlOiBhbnkpOiBib29sZWFuO1xyXG4gICAgb25LZXlEb3duKCRldmVudDogYW55KTogYm9vbGVhbjtcclxuICAgIG9uS2V5VXAoJGV2ZW50OiBhbnksIGlucHV0SWR4OiBhbnkpOiB2b2lkO1xyXG4gICAgYXBwZW5kS2V5KGlkOiBhbnkpOiBzdHJpbmc7XHJcbiAgICBzZXRTZWxlY3RlZChlbGVJZDogYW55KTogdm9pZDtcclxuICAgIGlmVmFsaWRFbnRyeShldmVudDogYW55KTogYm9vbGVhbjtcclxuICAgIGZvY3VzVG8oZWxlSWQ6IGFueSk6IHZvaWQ7XHJcbiAgICBzZXRWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHJlYnVpbGRWYWx1ZSgpOiB2b2lkO1xyXG4gICAgZ2V0SW5wdXRUeXBlKCk6IHN0cmluZztcclxuICAgIGhhbmRsZVBhc3RlKGU6IGFueSk6IHZvaWQ7XHJcbn1cclxuIl19