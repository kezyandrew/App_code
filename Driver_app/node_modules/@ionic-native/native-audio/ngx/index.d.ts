import { IonicNativePlugin } from '@ionic-native/core';
/**
 * @name Native Audio
 * @description Native Audio Playback
 * @usage
 * ```typescript
 * import { NativeAudio } from '@ionic-native/native-audio/ngx';
 *
 * constructor(private nativeAudio: NativeAudio) { }
 *
 * ...
 *
 * this.nativeAudio.preloadSimple('uniqueId1', 'path/to/file.mp3').then(onSuccess, onError);
 * this.nativeAudio.preloadComplex('uniqueId2', 'path/to/file2.mp3', 1, 1, 0).then(onSuccess, onError);
 *
 * this.nativeAudio.play('uniqueId1').then(onSuccess, onError);
 *
 * // can optionally pass a callback to be called when the file is done playing
 * this.nativeAudio.play('uniqueId1', () => console.log('uniqueId1 is done playing'));
 *
 * this.nativeAudio.loop('uniqueId2').then(onSuccess, onError);
 *
 * this.nativeAudio.setVolumeForComplexAsset('uniqueId2', 0.6).then(onSuccess,onError);
 *
 * this.nativeAudio.stop('uniqueId1').then(onSuccess,onError);
 *
 * this.nativeAudio.unload('uniqueId1').then(onSuccess,onError);
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class NativeAudio extends IonicNativePlugin {
    /**
     * Loads an audio file into memory. Optimized for short clips / single shots (up to five seconds). Cannot be stopped / looped.
     * @param id {string} unique ID for the audio file
     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.
     * @returns {Promise<any>}
     */
    preloadSimple(id: string, assetPath: string): Promise<any>;
    /**
     * Loads an audio file into memory. Optimized for background music / ambient sound. Uses highlevel native APIs with a larger footprint. (iOS: AVAudioPlayer). Can be stopped / looped and used with multiple voices. Can be faded in and out using the delay parameter.
     * @param id {string} unique ID for the audio file
     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.
     * @param volume {number} the volume of the preloaded sound (0.1 to 1.0)
     * @param voices {number} the number of multichannel voices available
     * @param delay {number}
     * @returns {Promise<any>}
     */
    preloadComplex(id: string, assetPath: string, volume: number, voices: number, delay: number): Promise<any>;
    /**
     * Plays an audio asset
     * @param id {string} unique ID for the audio file
     * @param completeCallback {Function} optional. Callback to be invoked when audio is done playing
     * @returns {Promise<any>}
     */
    play(id: string, completeCallback?: Function): Promise<any>;
    /**
     * Stops playing an audio
     * @param id {string} unique ID for the audio file
     * @returns {Promise<any>}
     */
    stop(id: string): Promise<any>;
    /**
     * Loops an audio asset infinitely, this only works for complex assets
     * @param id {string} unique ID for the audio file
     * @return {Promise<any>}
     */
    loop(id: string): Promise<any>;
    /**
     * Unloads an audio file from memory
     * @param id {string} unique ID for the audio file
     * @returns {Promise<any>}
     */
    unload(id: string): Promise<any>;
    /**
     * Changes the volume for preloaded complex assets.
     * @param id {string} unique ID for the audio file
     * @param volume {number} the volume of the audio asset (0.1 to 1.0)
     * @returns {Promise<any>}
     */
    setVolumeForComplexAsset(id: string, volume: number): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NativeAudio, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NativeAudio>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG4vKipcbiAqIEBuYW1lIE5hdGl2ZSBBdWRpb1xuICogQGRlc2NyaXB0aW9uIE5hdGl2ZSBBdWRpbyBQbGF5YmFja1xuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBOYXRpdmVBdWRpbyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbmF0aXZlLWF1ZGlvL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBuYXRpdmVBdWRpbzogTmF0aXZlQXVkaW8pIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMubmF0aXZlQXVkaW8ucHJlbG9hZFNpbXBsZSgndW5pcXVlSWQxJywgJ3BhdGgvdG8vZmlsZS5tcDMnKS50aGVuKG9uU3VjY2Vzcywgb25FcnJvcik7XG4gKiB0aGlzLm5hdGl2ZUF1ZGlvLnByZWxvYWRDb21wbGV4KCd1bmlxdWVJZDInLCAncGF0aC90by9maWxlMi5tcDMnLCAxLCAxLCAwKS50aGVuKG9uU3VjY2Vzcywgb25FcnJvcik7XG4gKlxuICogdGhpcy5uYXRpdmVBdWRpby5wbGF5KCd1bmlxdWVJZDEnKS50aGVuKG9uU3VjY2Vzcywgb25FcnJvcik7XG4gKlxuICogLy8gY2FuIG9wdGlvbmFsbHkgcGFzcyBhIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBmaWxlIGlzIGRvbmUgcGxheWluZ1xuICogdGhpcy5uYXRpdmVBdWRpby5wbGF5KCd1bmlxdWVJZDEnLCAoKSA9PiBjb25zb2xlLmxvZygndW5pcXVlSWQxIGlzIGRvbmUgcGxheWluZycpKTtcbiAqXG4gKiB0aGlzLm5hdGl2ZUF1ZGlvLmxvb3AoJ3VuaXF1ZUlkMicpLnRoZW4ob25TdWNjZXNzLCBvbkVycm9yKTtcbiAqXG4gKiB0aGlzLm5hdGl2ZUF1ZGlvLnNldFZvbHVtZUZvckNvbXBsZXhBc3NldCgndW5pcXVlSWQyJywgMC42KS50aGVuKG9uU3VjY2VzcyxvbkVycm9yKTtcbiAqXG4gKiB0aGlzLm5hdGl2ZUF1ZGlvLnN0b3AoJ3VuaXF1ZUlkMScpLnRoZW4ob25TdWNjZXNzLG9uRXJyb3IpO1xuICpcbiAqIHRoaXMubmF0aXZlQXVkaW8udW5sb2FkKCd1bmlxdWVJZDEnKS50aGVuKG9uU3VjY2VzcyxvbkVycm9yKTtcbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmF0aXZlQXVkaW8gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gICAgLyoqXG4gICAgICogTG9hZHMgYW4gYXVkaW8gZmlsZSBpbnRvIG1lbW9yeS4gT3B0aW1pemVkIGZvciBzaG9ydCBjbGlwcyAvIHNpbmdsZSBzaG90cyAodXAgdG8gZml2ZSBzZWNvbmRzKS4gQ2Fubm90IGJlIHN0b3BwZWQgLyBsb29wZWQuXG4gICAgICogQHBhcmFtIGlkIHtzdHJpbmd9IHVuaXF1ZSBJRCBmb3IgdGhlIGF1ZGlvIGZpbGVcbiAgICAgKiBAcGFyYW0gYXNzZXRQYXRoIHtzdHJpbmd9ICB0aGUgcmVsYXRpdmUgcGF0aCBvciBhYnNvbHV0ZSBVUkwgKGlubHVkaW5nIGh0dHA6Ly8pIHRvIHRoZSBhdWRpbyBhc3NldC5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIHByZWxvYWRTaW1wbGUoaWQ6IHN0cmluZywgYXNzZXRQYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogTG9hZHMgYW4gYXVkaW8gZmlsZSBpbnRvIG1lbW9yeS4gT3B0aW1pemVkIGZvciBiYWNrZ3JvdW5kIG11c2ljIC8gYW1iaWVudCBzb3VuZC4gVXNlcyBoaWdobGV2ZWwgbmF0aXZlIEFQSXMgd2l0aCBhIGxhcmdlciBmb290cHJpbnQuIChpT1M6IEFWQXVkaW9QbGF5ZXIpLiBDYW4gYmUgc3RvcHBlZCAvIGxvb3BlZCBhbmQgdXNlZCB3aXRoIG11bHRpcGxlIHZvaWNlcy4gQ2FuIGJlIGZhZGVkIGluIGFuZCBvdXQgdXNpbmcgdGhlIGRlbGF5IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0gaWQge3N0cmluZ30gdW5pcXVlIElEIGZvciB0aGUgYXVkaW8gZmlsZVxuICAgICAqIEBwYXJhbSBhc3NldFBhdGgge3N0cmluZ30gIHRoZSByZWxhdGl2ZSBwYXRoIG9yIGFic29sdXRlIFVSTCAoaW5sdWRpbmcgaHR0cDovLykgdG8gdGhlIGF1ZGlvIGFzc2V0LlxuICAgICAqIEBwYXJhbSB2b2x1bWUge251bWJlcn0gdGhlIHZvbHVtZSBvZiB0aGUgcHJlbG9hZGVkIHNvdW5kICgwLjEgdG8gMS4wKVxuICAgICAqIEBwYXJhbSB2b2ljZXMge251bWJlcn0gdGhlIG51bWJlciBvZiBtdWx0aWNoYW5uZWwgdm9pY2VzIGF2YWlsYWJsZVxuICAgICAqIEBwYXJhbSBkZWxheSB7bnVtYmVyfVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgcHJlbG9hZENvbXBsZXgoaWQ6IHN0cmluZywgYXNzZXRQYXRoOiBzdHJpbmcsIHZvbHVtZTogbnVtYmVyLCB2b2ljZXM6IG51bWJlciwgZGVsYXk6IG51bWJlcik6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBQbGF5cyBhbiBhdWRpbyBhc3NldFxuICAgICAqIEBwYXJhbSBpZCB7c3RyaW5nfSB1bmlxdWUgSUQgZm9yIHRoZSBhdWRpbyBmaWxlXG4gICAgICogQHBhcmFtIGNvbXBsZXRlQ2FsbGJhY2sge0Z1bmN0aW9ufSBvcHRpb25hbC4gQ2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGF1ZGlvIGlzIGRvbmUgcGxheWluZ1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgcGxheShpZDogc3RyaW5nLCBjb21wbGV0ZUNhbGxiYWNrPzogRnVuY3Rpb24pOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU3RvcHMgcGxheWluZyBhbiBhdWRpb1xuICAgICAqIEBwYXJhbSBpZCB7c3RyaW5nfSB1bmlxdWUgSUQgZm9yIHRoZSBhdWRpbyBmaWxlXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBzdG9wKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogTG9vcHMgYW4gYXVkaW8gYXNzZXQgaW5maW5pdGVseSwgdGhpcyBvbmx5IHdvcmtzIGZvciBjb21wbGV4IGFzc2V0c1xuICAgICAqIEBwYXJhbSBpZCB7c3RyaW5nfSB1bmlxdWUgSUQgZm9yIHRoZSBhdWRpbyBmaWxlXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGxvb3AoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBVbmxvYWRzIGFuIGF1ZGlvIGZpbGUgZnJvbSBtZW1vcnlcbiAgICAgKiBAcGFyYW0gaWQge3N0cmluZ30gdW5pcXVlIElEIGZvciB0aGUgYXVkaW8gZmlsZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgdW5sb2FkKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgdm9sdW1lIGZvciBwcmVsb2FkZWQgY29tcGxleCBhc3NldHMuXG4gICAgICogQHBhcmFtIGlkIHtzdHJpbmd9IHVuaXF1ZSBJRCBmb3IgdGhlIGF1ZGlvIGZpbGVcbiAgICAgKiBAcGFyYW0gdm9sdW1lIHtudW1iZXJ9IHRoZSB2b2x1bWUgb2YgdGhlIGF1ZGlvIGFzc2V0ICgwLjEgdG8gMS4wKVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgc2V0Vm9sdW1lRm9yQ29tcGxleEFzc2V0KGlkOiBzdHJpbmcsIHZvbHVtZTogbnVtYmVyKTogUHJvbWlzZTxhbnk+O1xufVxuIl19