import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, checkAvailability, getPromise } from '@ionic-native/core';
var Printer = /** @class */ (function (_super) {
    __extends(Printer, _super);
    function Printer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Checks whether the device is capable of printing (uses `check()` internally)
     * @returns {Promise<boolean>}
     */
    Printer.prototype.isAvailable = function () {
        return this.check().then(function (res) { return Promise.resolve(res.avail); });
    };
    Printer.prototype.check = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return getPromise(function (resolve) {
                    Printer.getPlugin().canPrintItem(function (avail, count) {
                        resolve({ avail: avail, count: count });
                    });
                });
            }
        })();
    };
    Printer.prototype.pick = function () { return cordova(this, "pick", {}, arguments); };
    Printer.prototype.print = function (content, options) { return cordova(this, "print", { "successIndex": 2, "errorIndex": 4 }, arguments); };
    Printer.pluginName = "Printer";
    Printer.plugin = "cordova-plugin-printer";
    Printer.pluginRef = "cordova.plugins.printer";
    Printer.repo = "https://github.com/katzer/cordova-plugin-printer";
    Printer.platforms = ["Android", "iOS", "Windows"];
    Printer = __decorate([
        Injectable()
    ], Printer);
    return Printer;
}(IonicNativePlugin));
export { Printer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3ByaW50ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8saURBQW9ELFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQXVLckUsMkJBQWlCOzs7O0lBQzVDOzs7T0FHRztJQUNILDZCQUFXLEdBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFRLElBQUssT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFPRCx1QkFBSzs7O21EQUFpQjtnQkFDcEIsT0FBTyxVQUFVLENBQU0sVUFBQyxPQUFpQjtvQkFDdkMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFDLEtBQWMsRUFBRSxLQUFVO3dCQUMxRCxPQUFPLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDLENBQUM7b0JBQzVCLENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FBQyxDQUFDO2FBQ0o7OztJQU9ELHNCQUFJO0lBY0osdUJBQUssYUFBQyxPQUE4QixFQUFFLE9BQXNCOzs7Ozs7SUF6Q2pELE9BQU87UUFEbkIsVUFBVSxFQUFFO09BQ0EsT0FBTztrQkF4S3BCO0VBd0s2QixpQkFBaUI7U0FBakMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFDaGVjaywgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiwgZ2V0UHJvbWlzZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmludGVyZmFjZSBGb250T3B0aW9ucyB7XG4gIG5hbWU6IHN0cmluZzsgLy8gVGhlIG5hbWUgb2YgdGhlIGZvbnQgZmFtaWx5LiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgc2l6ZTogbnVtYmVyOyAvLyBUaGUgc2l6ZSBvZiB0aGUgZm9udC4gT25seSBzdXBwb3J0ZWQgb24gaU9TLCBBbmRyb2lkXG4gIGl0YWxpYzogYm9vbGVhbjsgLy8gU2V0IHRvIHRydWUgdG8gZW5hYmxlIHRoZXNlIGZvbnQgdHJhaXRzLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgYm9sZDogYm9vbGVhbjsgLy8gU2V0IHRvIHRydWUgdG8gZW5hYmxlIHRoZXNlIGZvbnQgdHJhaXRzLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgYWxpZ246ICdsZWZ0JyB8ICdyaWdodCcgfCAnY2VudGVyJyB8ICdqdXN0aWZpZWQnOyAvLyBQb3NzaWJsZSBhbGlnbm1lbnRzIGFyZSBsZWZ0LCByaWdodCwgY2VudGVyIGFuZCBqdXN0aWZpZWQuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xuICBjb2xvcjogc3RyaW5nOyAvLyBUaGUgY29sb3Igb2YgdGhlIGZvbnQgaW4gaGV4YS1kZWNpbWFsIFJHQiBmb3JtYXQgLSBcIkZGMDAwMFwiIG1lYW5zIHJlZC4gT25seSBzdXBwb3J0ZWQgb24gaU9TXG59XG5cbmludGVyZmFjZSBIZWFkZXJGb290ZXJMYWJlbE9wdGlvbnMge1xuICB0ZXh0OiBzdHJpbmc7IC8vIFRoZSBwbGFpbiB0ZXh0IHRvIGRpc3BsYXkuIFVzZSAlbGQgdG8gaW5kaWNhdGUgd2hlcmUgdG8gaW5zZXJ0IHRoZSBwYWdlIGluZGV4LiBGb3IgZXhhbXBsZSBcIlBhZ2UgJWxkXCIgd291bGQgcmVzdWx0IGludG8gXCJQYWdlIDFcIiwgXCJQYWdlIDJcIiwgLi4uLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgdG9wOiBzdHJpbmc7IC8vIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiB3aGVyZSB0byBwbGFjZSB0aGUgbGFiZWwgd2l0aGluIHRoZSBmb290ZXIgb3IgaGVhZGVyIGFyZWEuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xuICByaWdodDogc3RyaW5nOyAvLyBUaGUgcmVsYXRpdmUgcG9zaXRpb24gd2hlcmUgdG8gcGxhY2UgdGhlIGxhYmVsIHdpdGhpbiB0aGUgZm9vdGVyIG9yIGhlYWRlciBhcmVhLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgbGVmdDogc3RyaW5nOyAvLyBUaGUgcmVsYXRpdmUgcG9zaXRpb24gd2hlcmUgdG8gcGxhY2UgdGhlIGxhYmVsIHdpdGhpbiB0aGUgZm9vdGVyIG9yIGhlYWRlciBhcmVhLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgYm90dG9tOiBzdHJpbmc7IC8vIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiB3aGVyZSB0byBwbGFjZSB0aGUgbGFiZWwgd2l0aGluIHRoZSBmb290ZXIgb3IgaGVhZGVyIGFyZWEuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xuICBmb250OiBGb250T3B0aW9uczsgLy8gVGhlIGZvbnQgYXR0cmlidXRlcyBmb3IgdGhlIGxhYmVsLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgc2hvd1BhZ2VJbmRleDogYm9vbGVhbjsgLy8gU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gZGlzcGxheSB0aGUgcGFnZSBpbmRleC4gT25seSBzdXBwb3J0ZWQgb24gaU9TXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJpbnRPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBwcmludCBqb2IgYW5kIHRoZSBkb2N1bWVudFxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBjb3BpZXMgZm9yIHRoZSBwcmludCB0YXNrLlxuICAgKiBPbmx5IHN1cHBvcnRlZCBvbiBpT1MsIFdpbmRvd3NcbiAgICovXG4gIGNvcGllcz86IG51bWJlcjtcblxuICAvKipcbiAgICogTGltaXRzIHRoZSBwYWdlcyB0byBwcmludCBldmVuIHRoZSBkb2N1bWVudCBjb250YWlucyBtb3JlLlxuICAgKiBUbyBza2lwIHRoZSBsYXN0IG4gcGFnZXMgeW91IGNhbiBhc3NpZ24gYSBuZWdhdGl2ZSB2YWx1ZSBvbiBpT1MuXG4gICAqIE9ubHkgc3VwcG9ydGVkIG9uIGlPUywgQW5kcm9pZFxuICAgKi9cbiAgcGFnZUNvdW50PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGR1cGxleCBtb2RlIHRvIHVzZSBmb3IgdGhlIHByaW50IGpvYi5cbiAgICogRWl0aGVyIGRvdWJsZS1zaWRlZCBvbiBzaG9ydCBzaXRlIChkdXBsZXg6J3Nob3J0JyksXG4gICAqIGRvdWJsZS1zaWRlZCBvbiBsb25nIHNpdGUgKGR1cGxleDonbG9uZycpIG9yIHNpbmdsZS1zaWRlZCAoZHVwbGV4Oidub25lJykuXG4gICAqL1xuICBkdXBsZXg/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgb3JpZW50YXRpb24gb2YgdGhlIHByaW50ZWQgY29udGVudCwgcG9ydHJhaXQgb3IgbGFuZHNjYXBlXG4gICAqIFBvcnRyYWl0IGJ5IGRlZmF1bHQuXG4gICAqL1xuICBvcmllbnRhdGlvbj86ICdsYW5kc2NhcGUnIHwgJ3BvcnRyYWl0JztcblxuICAvKipcbiAgICogSWYgeW91ciBhcHBsaWNhdGlvbiBvbmx5IHByaW50cyBibGFjayB0ZXh0LCBzZXR0aW5nIHRoaXMgcHJvcGVydHkgdG8gdHJ1ZSBjYW4gcmVzdWx0IGluIGJldHRlciBwZXJmb3JtYW5jZSBpbiBtYW55IGNhc2VzLlxuICAgKiBGYWxzZSBieSBkZWZhdWx0LlxuICAgKi9cbiAgbW9ub2Nocm9tZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIElmIHlvdXIgYXBwbGljYXRpb24gb25seSBwcmludHMgYmxhY2sgdGV4dCwgc2V0dGluZyB0aGlzIHByb3BlcnR5IHRvIHRydWUgY2FuIHJlc3VsdCBpbiBiZXR0ZXIgcGVyZm9ybWFuY2UgaW4gbWFueSBjYXNlcy5cbiAgICogRmFsc2UgYnkgZGVmYXVsdC5cbiAgICogT25seSBzdXBwb3J0ZWQgb24gaU9TLCBXaW5kb3dzXG4gICAqL1xuICBwaG90bz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIGRvd25zY2FsaW5nIHRoZSBpbWFnZSB0byBmaXQgaW50byB0aGUgY29udGVudCBhcmVhZC5cbiAgICogT25seSBzdXBwb3J0ZWQgb24gQW5kcm9pZFxuICAgKi9cbiAgYXV0b0ZpdD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBuZXR3b3JrIFVSTCB0byB0aGUgcHJpbnRlci5cbiAgICogT25seSBzdXBwb3J0ZWQgb24gaU9TXG4gICAqL1xuICBwcmludGVyPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBtYXhpbXVtIHNpemUgb2YgdGhlIGNvbnRlbnQgYXJlYS5cbiAgICogT25seSBzdXBwb3J0ZWQgb24gaU9TXG4gICAqL1xuICBtYXhIZWlnaHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG1heGltdW0gc2l6ZSBvZiB0aGUgY29udGVudCBhcmVhLlxuICAgKiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgICovXG4gIG1heFdpZHRoPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXQgdG8gZmFsc2UgdG8gYXZvaWQgbWFyZ2lucy5cbiAgICogVGhlIG1hcmdpbnMgZm9yIGVhY2ggcHJpbnRlZCBwYWdlLiBFYWNoIHByaW50ZXIgbWlnaHQgaGF2ZSBpdHMgb3duIG1pbmltdW0gbWFyZ2lucyBkZXBlbmRzIG9uIG1lZGlhIHR5cGUgYW5kIHBhcGVyIGZvcm1hdC5cbiAgICovXG4gIG1hcmdpbj86XG4gICAgfCBib29sZWFuXG4gICAgfCB7XG4gICAgICAgIHRvcD86IHN0cmluZztcbiAgICAgICAgbGVmdD86IHN0cmluZztcbiAgICAgICAgcmlnaHQ/OiBzdHJpbmc7XG4gICAgICAgIGJvdHRvbT86IHN0cmluZztcbiAgICAgIH07XG5cbiAgdWk/OiB7XG4gICAgaGlkZU51bWJlck9mQ29waWVzPzogc3RyaW5nOyAvLyBTZXQgdG8gdHJ1ZSB0byBoaWRlIHRoZSBjb250cm9sIGZvciB0aGUgbnVtYmVyIG9mIGNvcGllcy4gT25seSBzdXBwb3J0ZWQgb24gaU9TXG4gICAgaGlkZVBhcGVyRm9ybWF0Pzogc3RyaW5nOyAvLyBTZXQgdG8gdHJ1ZSB0byBoaWRlIHRoZSBjb250cm9sIGZvciB0aGUgcGFwZXIgZm9ybWF0LiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgICB0b3A/OiBudW1iZXI7IC8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgcHJpbnRlciBwaWNrZXIuIE9ubHkgc3VwcG9ydGVkIG9uIGlQYWRcbiAgICBsZWZ0PzogbnVtYmVyOyAvLyBUaGUgcG9zaXRpb24gb2YgdGhlIHByaW50ZXIgcGlja2VyLiBPbmx5IHN1cHBvcnRlZCBvbiBpUGFkXG4gICAgaGVpZ2h0PzogbnVtYmVyOyAvLyBUaGUgc2l6ZSBvZiB0aGUgcHJpbnRlciBwaWNrZXIuIE9ubHkgc3VwcG9ydGVkIG9uIGlQYWRcbiAgICB3aWR0aD86IG51bWJlcjsgLy8gVGhlIHNpemUgb2YgdGhlIHByaW50ZXIgcGlja2VyLiBPbmx5IHN1cHBvcnRlZCBvbiBpUGFkXG4gIH07XG5cbiAgcGFwZXI/OiB7XG4gICAgd2lkdGg6IHN0cmluZzsgLy8gVGhlIGRpbWVuc2lvbnMgb2YgdGhlIHBhcGVyIOKAkyBpT1Mgd2lsbCB3aWxsIHRyeSB0byBjaG9vc2UgYSBmb3JtYXQgd2hpY2ggZml0cyBiZXN0cy4gT25seSBzdXBwb3J0ZWQgb24gaU9TXG4gICAgaGVpZ2h0OiBzdHJpbmc7IC8vIFRoZSBkaW1lbnNpb25zIG9mIHRoZSBwYXBlciDigJMgaU9TIHdpbGwgd2lsbCB0cnkgdG8gY2hvb3NlIGEgZm9ybWF0IHdoaWNoIGZpdHMgYmVzdHMuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xuICAgIG5hbWU6IHN0cmluZzsgLy8gVGhlIG5hbWUgb2YgdGhlIGZvcm1hdCBsaWtlIElzb0E0IG9yIFJvbGwyMkluY2guIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3V3cC9hcGkvd2luZG93cy5ncmFwaGljcy5wcmludGluZy5wcmludG1lZGlhc2l6ZS4gT25seSBzdXBwb3J0ZWQgb24gV2luZG93c1xuICAgIGxlbmd0aDogc3RyaW5nOyAvLyBPbiByb2xsLWZlZCBwcmludGVycyB5b3UgY2FuIGRlY2lkZSB3aGVuIHRoZSBwcmludGVyIGN1dHMgdGhlIHBhcGVyLiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy91d3AvYXBpL3dpbmRvd3MuZ3JhcGhpY3MucHJpbnRpbmcucHJpbnRtZWRpYXNpemUuIE9ubHkgc3VwcG9ydGVkIG9uIGlPc1xuICB9O1xuXG4gIGZvbnQ/OiBGb250T3B0aW9ucztcblxuICBoZWFkZXI/OiB7XG4gICAgaGVpZ2h0OiBzdHJpbmc7IC8vIFRoZSBoZWlnaHQgb2YgdGhlIGhlYWRlciBvciBmb290ZXIgb24gZWFjaCBwYWdlLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgICBsYWJlbHM6IHN0cmluZ1tdOyAvLyBBbiBhcnJheSBvZiBsYWJlbHMgdG8gZGlzcGxheS4gT25seSB1c2UgaWYgdGhlcmUgYXJlIG1vcmUgdGhlbiBvbmUuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xuICAgIGxhYmVsOiBIZWFkZXJGb290ZXJMYWJlbE9wdGlvbnM7XG4gIH07XG5cbiAgZm9vdGVyPzoge1xuICAgIGhlaWdodDogc3RyaW5nOyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBoZWFkZXIgb3IgZm9vdGVyIG9uIGVhY2ggcGFnZS4gT25seSBzdXBwb3J0ZWQgb24gaU9TXG4gICAgbGFiZWxzOiBzdHJpbmdbXTsgLy8gQW4gYXJyYXkgb2YgbGFiZWxzIHRvIGRpc3BsYXkuIE9ubHkgdXNlIGlmIHRoZXJlIGFyZSBtb3JlIHRoZW4gb25lLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcbiAgICBsYWJlbDogSGVhZGVyRm9vdGVyTGFiZWxPcHRpb25zO1xuICB9O1xufVxuXG4vKipcbiAqIEBuYW1lIFByaW50ZXJcbiAqIEBkZXNjcmlwdGlvbiBQcmludHMgZG9jdW1lbnRzIG9yIEhUTUwgcmVuZGVyZWQgY29udGVudFxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBQcmludGVyLCBQcmludE9wdGlvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3ByaW50ZXIvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHByaW50ZXI6IFByaW50ZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMucHJpbnRlci5pc0F2YWlsYWJsZSgpLnRoZW4ob25TdWNjZXNzLCBvbkVycm9yKTtcbiAqXG4gKiBsZXQgb3B0aW9uczogUHJpbnRPcHRpb25zID0ge1xuICogICAgICBuYW1lOiAnTXlEb2N1bWVudCcsXG4gKiAgICAgIGR1cGxleDogdHJ1ZSxcbiAqICAgICAgb3JpZW50YXRpb246ICdsYW5kc2NhcGUnLFxuICogICAgICBtb25vY2hyb21lOiB0cnVlXG4gKiB9XG4gKlxuICogdGhpcy5wcmludGVyLnByaW50KGNvbnRlbnQsIG9wdGlvbnMpLnRoZW4ob25TdWNjZXNzLCBvbkVycm9yKTtcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIFByaW50T3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1ByaW50ZXInLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1wcmludGVyJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnByaW50ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2thdHplci9jb3Jkb3ZhLXBsdWdpbi1wcmludGVyJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJpbnRlciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHRoZSBkZXZpY2UgaXMgY2FwYWJsZSBvZiBwcmludGluZyAodXNlcyBgY2hlY2soKWAgaW50ZXJuYWxseSlcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5jaGVjaygpLnRoZW4oKHJlczogYW55KSA9PiBQcm9taXNlLnJlc29sdmUocmVzLmF2YWlsKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIFRvIGNoZWNrIGlmIHByaW50aW5nIGlzIHN1cHBvcnRlZCBpbiBnZW5lcmFsXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlIHdpdGggYW4gb2JqZWN0IGluZGljYXRpbmcgd2hldGhlciBwcmludGluZyBpcyBhdmFpbGFibGVcbiAgICovXG4gIEBDb3Jkb3ZhQ2hlY2soKVxuICBjaGVjaygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBnZXRQcm9taXNlPGFueT4oKHJlc29sdmU6IEZ1bmN0aW9uKSA9PiB7XG4gICAgICBQcmludGVyLmdldFBsdWdpbigpLmNhblByaW50SXRlbSgoYXZhaWw6IGJvb2xlYW4sIGNvdW50OiBhbnkpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh7IGF2YWlsLCBjb3VudCB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIGEgc3lzdGVtIGludGVyZmFjZSBhbGxvd2luZyB0aGUgdXNlciB0byBzZWxlY3QgYW4gYXZhaWxhYmxlIHByaW50ZXIuIFRvIHNwZWFrIHdpdGggYSBwcmludGVyIGRpcmVjdGx5IHlvdSBuZWVkIHRvIGtub3cgdGhlIG5ldHdvcmsgYWRkcmVzcyBieSBwaWNraW5nIHRoZW0gYmVmb3JlIHZpYSBgcHJpbnRlci5waWNrYC5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcGljaygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBjb250ZW50IHRvIHRoZSBwcmludGVyLlxuICAgKiBAcGFyYW0gY29udGVudCB7c3RyaW5nIHwgSFRNTEVsZW1lbnR9IFRoZSBjb250ZW50IHRvIHByaW50LiBDYW4gYmUgYSBVUkwgb3IgYW4gSFRNTCBzdHJpbmcuIElmIGEgSFRNTCBET00gT2JqZWN0IGlzIHByb3ZpZGVkLCBpdHMgaW5uZXJIdG1sIHByb3BlcnR5IHZhbHVlIHdpbGwgYmUgdXNlZC5cbiAgICogQHBhcmFtIG9wdGlvbnMge1ByaW50T3B0aW9uc30gb3B0aW9uYWwuIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIHByaW50ZXJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDIsXG4gICAgZXJyb3JJbmRleDogNCxcbiAgfSlcbiAgcHJpbnQoY29udGVudD86IHN0cmluZyB8IEhUTUxFbGVtZW50LCBvcHRpb25zPzogUHJpbnRPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==